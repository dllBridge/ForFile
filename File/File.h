



//  Пока 8 разных слов это максимум (для поиска)
//  Нужно сделать гибким размер массива.


//  Передаём в szWords[0] имя файла + путь. Например так: "C:\\dllBridge\\Test.txt"
//  Передаём в szWords[1...n] слова, которые требуется найти в тексте файла.
//  Передаём в szWords[n+1] текст "Preceding characters:" + возможные предшествующие слову символы.
//                      Например: "Preceding characters:(., =-". Сразу после двоеточия символы, которые могут быть
//                                 непосредственно перед первой буквой искомого слова.  
//  Передаём в szWords[n+2] текст "Ending characters:" + возможный послеующий символ(ы).
//                      Например: "Ending characters:.) ;!"	 Сразу после двоеточия символы, которые могут быть.



int*          wl_FileAnalysis(int N, const char *p); //char *psz[99]
// 
//  Возвращает указатель на массив, например "p"
//  0 - ERROR Не найден файл, если возвращает НОЛЬ
//  p[0] - содержит кол-во найденных (совпадающих) слов. 
//  p[1] - размер файла в байтах
//  p[2] - 
//
//
//
//


extern   int          File_Ofst;  
extern  char    szWords[11][51];




int     FRead(char *psz, int n);












//  1. Убрать UINT                                                         Решено !
//  2. Если не найден исследуемый файл, то возникает ошибка.               Решено !































//int   DDD(int N, const char *p);
                   //  Symb1[111], 
                   //  Symb2[111];



















  

                    //  *arr,
                   //   nWords,
                   
                 //  EndOfFile;






//void         init_analysis();

//int              Init(int p); 

//int      FRead_LF(char *psz); 
//int      find_pos(char *sz, int size); 






















































